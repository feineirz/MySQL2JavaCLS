@TITLE_A@
	/**
	 * <pre>
	 * @DESC_A@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Info(...);
	 * </pre>
	 * 
	 * @return True if update successful.
	 */
	public static boolean update@CLASSNAME@Info(@COLUMNLIST_WITHDATATYPE@) {
		
		@CLASSNAME@Info @CLASSNAMELOWER@Info = new @CLASSNAME@Info();
@STRUCTURED_COLUMNLIST@
		
		return update@CLASSNAME@Info(@CLASSNAMELOWER@Info);
		
	}
	
@TITLE_B@
	/**
	 * <pre>
	 * @DESC_B@
	 *
	 * Usage:
	 *  @CLASSNAME@Info @CLASSNAMELOWER@Info = new @CLASSNAME@Info();
	 *  @CLASSNAMELOWER@Info.@PRIMARYKEY@ = @PRIMARYKEY@;
	 *  ...
	 *
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Info(@CLASSNAMELOWER@Info);
	 * </pre>
	 * 
	 * @param @CLASSNAMELOWER@Info @CLASSNAME@ information structure contains all @CLASSNAME@'s information.
	 *
	 * @return True if update successful.
	 */
	public static boolean update@CLASSNAME@Info(@CLASSNAME@Info @CLASSNAMELOWER@Info) {
		
		Connection conn = new MySQLDatabase().getConnection();
		try {
			String qry = ""
				+ "UPDATE @TABLENAME@"
				+ " SET"
@UPDATE_COLUMNLIST_NONE_PRIMARYKEY@
				+ " WHERE @PRIMARYKEY@ = ?";
			PreparedStatement stmt = conn.prepareStatement(qry);
@STATEMENT_COLUMNLIST_NONE_PRIMARYKEY@
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	

@TITLE_C@
	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, String value) {
		
		Connection conn = new MySQLDatabase().getConnection();
		try {
			String qry = ""
				+ "UPDATE @TABLENAME@"
				+ " SET " + columnName + " = ?"
				+ " WHERE @PRIMARYKEY@ = '" + this.@PRIMARYKEY@ + "'";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setString(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Integer ///
	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, byte value) {
		return update@CLASSNAME@Property(columnName, new Long(value));
	}

	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, Short value) {
		return update@CLASSNAME@Property(columnName, new Long(value));
	}

	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, int value) {
		return update@CLASSNAME@Property(columnName, new Long(value));
	}

	/// Main Integer ///
	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, long value) {
		
		Connection conn = new MySQLDatabase().getConnection();
		try {
			String qry = ""
				+ "UPDATE @TABLENAME@"
				+ " SET " + columnName + " = ?"
				+ " WHERE @PRIMARYKEY@ = " + this.@PRIMARYKEY@;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setLong(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	/// Overload Decimal ///
	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, Float value) {
		return update@CLASSNAME@Property(columnName, new Double(value));
	}

	/// Main Decimal ///
	/**
	 * <pre>
	 * @DESC_C@
	 *
	 * Usage:
	 *  boolean result = @CLASSNAME@.update@CLASSNAME@Property(columnName, value);
	 * </pre>
	 * 
	 * @param columnName Column name in database's table to be update.
	 * @param value The value to be update to the given column name.
	 * 
	 * @return True if update successful.
	 */
	public boolean update@CLASSNAME@Property(String columnName, Double value) {
		
		Connection conn = new MySQLDatabase().getConnection();
		try {
			String qry = ""
				+ "UPDATE @TABLENAME@"
				+ " SET " + columnName + " = ?"
				+ " WHERE @PRIMARYKEY@ = " + this.@PRIMARYKEY@;
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.setDouble(1, value);
			
			stmt.execute();			
			conn.close();
			return true;
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
			return false;
		}
		
	}
	
