@SECTIONSTART@

@TITLE@
	/// DEFAULT CONSTRUCTOR ///
	/**
	 * <pre>
	 * Default constructor for @CLASSNAME@ class to use a private helpful methods.
	 * Usage: @CLASSNAME@ @CLASSNAMELOWER@ = new @CLASSNAME@();
	 * </pre>
	 */
	public @CLASSNAME@() {}

	/// OVERLOAD CONSTRUCTOR ///
	/**
	 * <pre>
	 * Class constructor for @CLASSNAME@ class by giving a Primary key.
	 * Usage: @CLASSNAME@ @CLASSNAMELOWER@ = new @CLASSNAME@(@PRIMARYKEY@);
	 * </pre>
	 *
	 * @param @PRIMARYKEY@ A Primary key of @CLASSNAME@ to be instances.
	 */       
	public @CLASSNAME@(@PRIMARYKEY_DATATYPE@ @PRIMARYKEY@) {		
		this(@PRIMARYKEY@, new MySQLDBConnector().getDBConnection(), true);		
	}
	
	/**
	 * <pre>
	 * Class constructor for @CLASSNAME@ class by giving a Primary key and a MySQL connector.
	 * Usage:
	 *  @CLASSNAME@ @CLASSNAMELOWER@ = new @CLASSNAME@(@PRIMARYKEY@, conn);
	 * </pre>
	 *
	 * @param @PRIMARYKEY@ A Primary key of @CLASSNAME@ to be instances.
	 * @param conn MySQL Connection use to connect to the database.
	 */
	public @CLASSNAME@(@PRIMARYKEY_DATATYPE@ @PRIMARYKEY@, Connection conn) {
		this(@PRIMARYKEY@, conn, false);
	}
	
	/// MAIN CONSTRUCTOR ///
	/**
	 * <pre>
	 * Class constructor for @CLASSNAME@ class by giving a Primary key, MySQL connector
	 * and Auto close connection option.
	 * Usage:
	 *  @CLASSNAME@ @CLASSNAMELOWER@ = new @CLASSNAME@(@PRIMARYKEY@, conn, true);
	 * </pre>
	 * 
	 * @param @PRIMARYKEY@ A Primary key of @CLASSNAME@ to be instances.
	 * @param conn MySQL Connection to be connect to the database.
	 * @param autoCloseConnection Auto close the given connection after query successful.
	 */
	public @CLASSNAME@(@PRIMARYKEY_DATATYPE@ @PRIMARYKEY@, Connection conn, boolean autoCloseConnection) {
		
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM " + relName
				+ " WHERE @PRIMARYKEY@=?";
			PreparedStatement stmt = conn.prepareStatement(qry);
			stmt.set@PRIMARYKEY_GETSETDATATYPE@(1, @PRIMARYKEY@);
			
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
@CLASSCONSTRUCTOR_PROPERTYLIST@
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if(autoCloseConnection) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
		}
		
	}

@SECTIONEND@

