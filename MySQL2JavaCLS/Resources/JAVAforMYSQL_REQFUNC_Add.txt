@TITLE_A@
	/**
	 * <pre>
	 * @DESC_A@
	 * Usage:
	 *  @CLASSNAME@ @CLASSNAMELOWER@ = add@CLASSNAME@(...);
	 * </pre>
	 * 
	 * @return @CLASSNAME@ object of new created @CLASSNAME@.
	 */
	public static @CLASSNAME@ add@CLASSNAME@(@COLUMNLIST_WITHDATATYPE@) {
		
		@CLASSNAME@Info @CLASSNAMELOWER@Info = new @CLASSNAME@Info();
@STRUCTURED_COLUMNLIST@
		
		return add@CLASSNAME@(@CLASSNAMELOWER@Info);
		
	}
	
@TITLE_B@
	/**
	 * <pre>
	 * @DESC_B@
	 * Usage:
	 *  @CLASSNAME@Info @CLASSNAMELOWER@Info = new @CLASSNAME@Info();
	 *  @CLASSNAMELOWER@Info.@PRIMARYKEY@ = @PRIMARYKEY@;
	 *  ...
	 *
	 *  @CLASSNAME@ @CLASSNAMELOWER@ = add@CLASSNAME@(@CLASSNAMELOWER@Info);
	 * </pre>
	 * 
	 * @param @CLASSNAMELOWER@Info @CLASSNAME@ information structure that contains all @CLASSNAME@'s information.
	 *
	 * @return @CLASSNAME@ object of new created @CLASSNAME@.
	 */
	public static @CLASSNAME@ add@CLASSNAME@(@CLASSNAME@Info @CLASSNAMELOWER@Info) {
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "INSERT INTO @TABLENAME@"
				+ " (@COLUMNLIST@)"
				+ " VALUES(@STATEMENTHOLDER@)";
			PreparedStatement stmt = conn.prepareStatement(qry, Statement.RETURN_GENERATED_KEYS);
@STATEMENT_COLUMNLIST@
			
			int afr = stmt.executeUpdate();
			if (afr > 0) {
				ResultSet rs = stmt.getGeneratedKeys();
				if (rs.next()) {
					@CLASSNAME@ @CLASSNAMELOWER@ = new @CLASSNAME@(rs.get@PRIMARYKEY_GETSETDATATYPE@(1), conn);			
					conn.close();
					return @CLASSNAMELOWER@;
				}
			}
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		return null;
		
	}
	
	