@TITLE@
	/// Overload ///
	/**
	 * <pre>
	 * Default List method to list all records of @CLASSNAME@ in a database.
	 *
	 * Usage:
	 *  ArrayList&lt;@CLASSNAME@&gt; @CLASSNAMELOWER@List = @CLASSNAME@.list@CLASSNAME@();
	 * </pre>
	 * 
	 * @return ArrayList of @CLASSNAME@ objects.
	 * 
	 */
	public static ArrayList<@CLASSNAME@> list@CLASSNAME@(){
		return list@CLASSNAME@("","");
	}

	/**
	 * <pre>
	 * List record(s) of @CLASSNAME@ in a database match the given condition.
	 *
	 * Usage:
	 *  ArrayList&lt;@CLASSNAME@&gt; @CLASSNAMELOWER@List = @CLASSNAME@.list@CLASSNAME@(condition);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @return ArrayList of @CLASSNAME@ objects match the given condition.
	 * 
	 */
	public static ArrayList<@CLASSNAME@> list@CLASSNAME@(String condition){
		return list@CLASSNAME@(condition,"");
	}
	
	/// Main ///
	/**
	 * <pre>
	 * List record(s) of @CLASSNAME@ in a database match the given condition
	 *  and sorted by the given order.
	 *
	 * Usage:
	 *  ArrayList&lt;@CLASSNAME@&gt; @CLASSNAMELOWER@List = @CLASSNAME@.list@CLASSNAME@(condition, order);
	 * </pre>
	 * 
	 * @param condition The condition to specify the record to be return.<pre>
	 *  Ex. "name = 'Foo' AND date BETWEEN '2021-01-01' AND '2021-12-31'"</pre>
	 * 
	 * @param order The order to sort the returned list.<pre>
	 *  Ex. "name desc"</pre>
	 * 
	 * @return ArrayList of @CLASSNAME@ objects match the given condition.
	 * 
	 */
	public static ArrayList<@CLASSNAME@> list@CLASSNAME@(String condition, String order) {
		
		ArrayList<@CLASSNAME@> buff = new ArrayList<@CLASSNAME@>();
		
		if(condition != "") condition = " WHERE " + condition;
		if(order != "") order = " ORDER BY " + order;
		
		Connection conn = new MySQLDBConnector().getDBConnection();
		try {
			String qry = ""
				+ "SELECT *"
				+ " FROM @TABLENAME@"
				+ condition
				+ order;
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(qry);
			while(rs.next()) {
				buff.add(new @CLASSNAME@(rs.get@PRIMARYKEY_GETSETDATATYPE@("@PRIMARYKEY@"), conn));
			}
			
			conn.close();
			
		} catch (SQLException e) {
			try {
				conn.close();
			} catch (SQLException ex) {
				ex.printStackTrace();
			}
			e.printStackTrace();
		}
		
		return buff;
		
	}
	
